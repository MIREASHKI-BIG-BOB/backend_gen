package main

import (
	"log"
	"net/http"
	"sync"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origin –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
	},
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
var clientManager = &ClientManager{
	clients:    make(map[*websocket.Conn]bool),
	broadcast:  make(chan []byte),
	register:   make(chan *websocket.Conn),
	unregister: make(chan *websocket.Conn),
}

type ClientManager struct {
	clients    map[*websocket.Conn]bool
	broadcast  chan []byte
	register   chan *websocket.Conn
	unregister chan *websocket.Conn
	mutex      sync.RWMutex
}

func (cm *ClientManager) run() {
	for {
		select {
		case client := <-cm.register:
			cm.mutex.Lock()
			cm.clients[client] = true
			cm.mutex.Unlock()
			log.Printf("–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: %d", len(cm.clients))

		case client := <-cm.unregister:
			cm.mutex.Lock()
			if _, ok := cm.clients[client]; ok {
				delete(cm.clients, client)
				client.Close()
			}
			cm.mutex.Unlock()
			log.Printf("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: %d", len(cm.clients))

		case message := <-cm.broadcast:
			cm.mutex.RLock()
			for client := range cm.clients {
				err := client.WriteMessage(websocket.TextMessage, message)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: %v", err)
					client.Close()
					delete(cm.clients, client)
				}
			}
			cm.mutex.RUnlock()
		}
	}
}

func main() {
	r := chi.NewRouter()

	//–¥–ª—è –ª–æ–≥
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

	r.Get("/ws", handleWebSocket)

	// –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go clientManager.run()

	log.Println("WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8081")
	log.Println("–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ ws://localhost:8081/ws")
	log.Fatal(http.ListenAndServe(":8081", r))
}

func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ WebSocket: %v", err)
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	clientManager.register <- conn

	defer func() {
		// –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
		clientManager.unregister <- conn
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		_, message, err := conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("WebSocket –æ—à–∏–±–∫–∞: %v", err)
			}
			break
		}

		// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
		log.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: %s", string(message))

		// –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É)
		clientManager.broadcast <- message
	}
}
