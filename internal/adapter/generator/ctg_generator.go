package generator

import (
	"backend_gen/internal/ports/generator"
	"backend_gen/internal/ports/websocket"
	"log"
	"math"
	"math/rand"
	"time"
)

// ctgGenerator —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é CTG –¥–∞–Ω–Ω—ã—Ö
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –ø–ª–æ–¥ (60%) –∏–ª–∏ —Å –≥–∏–ø–æ–∫—Å–∏–µ–π (40%)
type ctgGenerator struct {
	rng *rand.Rand

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–æ–¥–∞
	hasHypoxia bool // true = –≥–∏–ø–æ–∫—Å–∏—è, false = –∑–¥–æ—Ä–æ–≤—ã–π

	// –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	currentBPM    float64
	currentUterus float64
}

// NewCTGGenerator —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CTG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
// hypoxiaMode: 0 = –∑–¥–æ—Ä–æ–≤—ã–π –ø–ª–æ–¥, 1 = –≥–∏–ø–æ–∫—Å–∏—è
func NewCTGGenerator(hypoxiaMode int) generator.DataGenerator {
	rng := rand.New(rand.NewSource(time.Now().UnixNano()))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	hasHypoxia := hypoxiaMode == 1

	var initialBPM, initialUterus float64
	if hasHypoxia {
		// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∏–ø–æ–∫—Å–∏–∏ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ CSV: BPM ~148, Uterus ~17)
		initialBPM = 148.0
		initialUterus = 17.0
		log.Println("üî¥ CTG Generator: HYPOXIA mode (BPM: ~148, Uterus: ~17) [HYPOXIA_MODE=1]")
	} else {
		// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–ª–æ–¥–∞ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ CSV: BPM ~140, Uterus ~14.8)
		initialBPM = 140.0
		initialUterus = 14.5
		log.Println("üü¢ CTG Generator: HEALTHY mode (BPM: ~140, Uterus: ~14.5) [HYPOXIA_MODE=0]")
	}

	return &ctgGenerator{
		rng:           rng,
		hasHypoxia:    hasHypoxia,
		currentBPM:    initialBPM,
		currentUterus: initialUterus,
	}
}

// GenerateNext –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
func (g *ctgGenerator) GenerateNext(timestamp float64) websocket.SensorData {
	g.update()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Spasms –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–ª–æ–¥–∞ (–±–µ–∑ —Å—Ö–≤–∞—Ç–æ–∫)
	// –ù–µ–±–æ–ª—å—à–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤ –ø–æ–∫–æ–µ
	spasms := 20.0 + g.rng.Float64()*2 - 1.0 // 19-21, –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è

	return websocket.SensorData{
		BPMChild: g.currentBPM,
		Uterus:   g.currentUterus,
		Spasms:   math.Max(0, spasms),
	}
}

// update –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
func (g *ctgGenerator) update() {
	if g.hasHypoxia {
		// === –ì–ò–ü–û–ö–°–ò–Ø: –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ç–æ–Ω—É—Å –º–∞—Ç–∫–∏ –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—É–ª—å—Å ===
		g.currentUterus += g.rng.Float64()*0.8 - 0.4 // –ë–æ–ª—å—à–µ –∫–æ–ª–µ–±–∞–Ω–∏–π

		// –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥–∏–ø–æ–∫—Å–∏–∏ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞: —Å—Ä–µ–¥–Ω–µ–µ 17.09)
		if g.currentUterus < 16.0 {
			g.currentUterus = 16.0
		}
		if g.currentUterus > 18.5 {
			g.currentUterus = 18.5
		}

		// –ü—É–ª—å—Å –ø—Ä–∏ –≥–∏–ø–æ–∫—Å–∏–∏: –≤—ã—à–µ –∏ —Å –±–æ–ª—å—à–µ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
		baseBPM := 148.0                   // –ò–∑ –∞–Ω–∞–ª–∏–∑–∞: —Å—Ä–µ–¥–Ω–µ–µ 148.25
		varDelta := g.rng.Float64()*12 - 6 // –î–∏–∞–ø–∞–∑–æ–Ω ¬±6 (–±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å)

		g.currentBPM = baseBPM + varDelta

		// –ü—Ä–µ–¥–µ–ª—ã –¥–ª—è –≥–∏–ø–æ–∫—Å–∏–∏
		if g.currentBPM < 140 {
			g.currentBPM = 140
		}
		if g.currentBPM > 156 {
			g.currentBPM = 156
		}

	} else {
		// === –ó–î–û–†–û–í–´–ô –ü–õ–û–î: –ù–∏–∑–∫–∏–π —Ç–æ–Ω—É—Å –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—É–ª—å—Å ===
		g.currentUterus += g.rng.Float64()*0.6 - 0.3 // –ù–µ–±–æ–ª—å—à–æ–π –¥—Ä–µ–π—Ñ

		// –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–ª–æ–¥–∞ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞: —Å—Ä–µ–¥–Ω–µ–µ 14.80)
		if g.currentUterus < 13.5 {
			g.currentUterus = 13.5
		}
		if g.currentUterus > 15.5 {
			g.currentUterus = 15.5
		}

		// –ü—É–ª—å—Å –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–ª–æ–¥–∞
		baseBPM := 140.0                    // –ò–∑ –∞–Ω–∞–ª–∏–∑–∞: —Å—Ä–µ–¥–Ω–µ–µ 139.85
		varDelta := g.rng.Float64()*9 - 4.5 // –î–∏–∞–ø–∞–∑–æ–Ω ¬±4.5 (–Ω–æ—Ä–º–∞)

		g.currentBPM = baseBPM + varDelta

		// –ü—Ä–µ–¥–µ–ª—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ
		if g.currentBPM < 135 {
			g.currentBPM = 135
		}
		if g.currentBPM > 145 {
			g.currentBPM = 145
		}
	}
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º)
func (g *ctgGenerator) Reset() {
	g.rng = rand.New(rand.NewSource(time.Now().UnixNano()))

	// –ù–ï –º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º! –°–æ—Ö—Ä–∞–Ω—è–µ–º g.hasHypoxia –∫–∞–∫ –µ—Å—Ç—å
	if g.hasHypoxia {
		g.currentBPM = 148.0
		g.currentUterus = 17.0
		log.Println("üîÑ CTG Generator RESET: HYPOXIA mode")
	} else {
		g.currentBPM = 140.0
		g.currentUterus = 14.5
		log.Println("üîÑ CTG Generator RESET: HEALTHY mode")
	}
}

// SetParameters —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
func (g *ctgGenerator) SetParameters(params generator.GenerationParameters) {
	// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∑–¥–æ—Ä–æ–≤—ã–π –ø–ª–æ–¥ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
}
